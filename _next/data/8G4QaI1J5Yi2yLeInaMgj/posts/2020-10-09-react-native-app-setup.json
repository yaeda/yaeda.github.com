{"pageProps":{"postData":{"id":"2020-10-09-react-native-app-setup","contentHtml":"<h1>React Native アプリ開発初期設定（2020/10 版）</h1>\n<p>Expo に Bare Workflow というのが出来てからなんとなく自分の中で React Native アプリ開発の初期設定の型が固まってきた感じがするので，一旦以下の項目について現状のやり方と次の機会に確認すべきポイントをまとめておく．</p>\n<ul>\n<li>プロジェクトの作成</li>\n<li>App Name / Package Name / Bundle ID の変更</li>\n<li>バージョン管理方法</li>\n</ul>\n<p>なおこの構成で 3 つほどアプリを作ってきてはいるが，どれも実際にストアに出すには至っていない．商用アプリ向けにはもっといい方法があるかもしれない（知りたい）．</p>\n<h2>TL;DR</h2>\n<p>Expo bare workflow + unimodules + Typescript なプロジェクトを作成</p>\n<pre><code class=\"language-sh\">npm install -g expo-cli # if you don't have expo command\nexpo init --template expo-template-bare-typescript\n</code></pre>\n<p>アプリ名と id を変更 （+マニュアル修正）</p>\n<pre><code class=\"language-sh\">npx react-native-rename \"My App\" -b io.github.yaeda.myapp\n</code></pre>\n<p><code>react-native-version</code>でバージョン管理</p>\n<pre><code class=\"language-json\">\"scripts\": {\n  \"postversion\": \"react-native-version\n}\n</code></pre>\n<h2>プロジェクトの作成</h2>\n<p>React Native でアプリを作るとなるとまず Expo が使えるかを検討する．Expo には managed workflow と bare workflow という二通りの使い方があり，managed workflow の方が使えれば話は早く，何も考えずに巻かれておけばよいと思う．ただし managed workflow には制約があり，一部の Native 機能が使えない．それぞれの workflow や制約については以下のリンクを参照．</p>\n<ul>\n<li><a href=\"https://docs.expo.io/introduction/managed-vs-bare/\">Workflows - Expo Documentation</a></li>\n<li><a href=\"https://docs.expo.io/introduction/why-not-expo/#build-service-only-works-in-the-managed\">Limitations - Expo Documentation</a></li>\n</ul>\n<p>自分の場合は Bluetooth を使うことが多く，managed workflow が使えないので bare workflow を愛用している．bare workflow を使うと，普通の React Native アプリとして開発しながら unimodules という仕組みを利用して Expo 関連のライブラリを使えるようになる．完全に Expo から離れるという選択肢もあるとは思うが，経験上 Expo 関連のライブラリを使いたくなるケースが多く，後から対応するのはやや大変（後述）なので最初から bare workflow を使うと決めてかかったほうが幸せになれる．</p>\n<p>ということで以下のコマンドで Expo bare workflow + unimodules + Typescript なプロジェクトを作成する．</p>\n<pre><code class=\"language-sh\">npm install -g expo-cli # if you don't have expo command\nexpo init --template expo-template-bare-typescript\n</code></pre>\n<h3>確認ポイント: 既存アプリのマイグレーションについて</h3>\n<p>既に出来上がっている React Native アプリに unimodules 対応を入れる場合は以下のページを参照．</p>\n<p><a href=\"https://docs.expo.io/bare/installing-unimodules/\">Installing react-native-unimodules - Expo Documentation</a></p>\n<p>現状はマニュアルで書き換える必要のあるファイル・変更数が多く，つらい．今後マイグレーションスクリプトなどができる可能性があるのでタイミングをみて確認すると良さそう．</p>\n<h3>確認ポイント: <code>create-react-native-app</code>コマンドについて</h3>\n<p>また，上記の unimodules 導入ページでおすすめされている<code>npx create-react-native-app</code>というコマンドは実行後の選択肢で「Default new app」を選ぶと unimodules 入りの bare workflow のプロジェクト（非 typescript）が生成されるが，「Template from expo/examples」を選ぶともれなく managed workflow になるので注意．今後 template の追加などで改善されるかもしれないのでここも確認ポイント．</p>\n<h2>App Name / Package Name / Bundle ID の変更</h2>\n<p><code>expo init</code>コマンドで指定できるアプリ名には（空白が使えない等の）制約があったり，Package Name（Android）や Bundle ID（iOS）が自動で付与されるので変更する必要がある．</p>\n<p>ということで以下のコマンドでアプリ名と id を変更する．</p>\n<pre><code class=\"language-sh\">npx react-native-rename \"My App\" -b io.github.yaeda.myapp\n</code></pre>\n<p>が，対応不十分でかなりマニュアルでの修正が必要．みんなこれどうやってるのか教えて欲しい．</p>\n<h3>確認ポイント: <code>expo init</code>のオプション</h3>\n<p><code>expo init</code>のオプションは以下のページで解説がある．</p>\n<p><a href=\"https://docs.expo.io/workflow/expo-cli/#expo-init\">Expo CLI - Expo Documentation</a></p>\n<p><code>--name</code>は「The name of your app visible on the home screen.」とあるが空白が入れられないなどの制約がある．昔はキャメルケースしかサポートしていなかったが，スネークケースやケバブケースも使えるようになったという経緯があるので今後さらなる改善があるかもしれない．</p>\n<p>また，<code>--android-package</code>や<code>--ios-bundle-identifier</code>のようなオプションも検討された形跡がある．</p>\n<ul>\n<li><a href=\"https://github.com/expo/expo-cli/issues/824\">expo init disregards --android-package and --ios-bundle-identifier arguments · Issue #824 · expo/expo-cli</a></li>\n<li><a href=\"https://github.com/expo/expo-cli/pull/1878\">feat(expo-cli): add package and bundle identifier to init by byCedric · Pull Request #1878 · expo/expo-cli</a></li>\n</ul>\n<p>このあたり公式でサポートされれば使いたいので要チェック．</p>\n<h3>確認ポイント: ライブラリのアップデート \b</h3>\n<p>公式の方法がない場合は 3rd party ライブラリが存在しないかチェックする．現時点で有力な<code>react-native-rename</code>や<code>react-native-ci-tools</code>は開発が止まっている．</p>\n<h2>バージョン管理方法</h2>\n<p>マルチプラットフォーム展開時のバージョン管理について，は今の所全てに共通のバージョンを付与する方針でやっている．pacakge.json の<code>postversion</code>に<code>react-native-version</code>を使うと楽．</p>\n<pre><code class=\"language-json\">\"scripts\": {\n  \"postversion\": \"react-native-version\n}\n</code></pre>\n<p>こうすると<code>yarn version</code>すると連動して android と ios のバージョンも上げくれる．</p>\n<p>ただし，app.json に expo フィールドが存在すると managed workflow だと勘違いされて正しくバージョン更新がされない問題がある．</p>\n<ul>\n<li><a href=\"https://github.com/stovmascript/react-native-version/issues/105\">Issue with ejected Expo Project · Issue #105 · stovmascript/react-native-version</a></li>\n</ul>\n<p>そのため，app.json から expo フィールドを削除するか，以下の Pull Request 版を使うと良い．</p>\n<ul>\n<li><a href=\"https://github.com/stovmascript/react-native-version/pull/150\">--ignore-expo cli option by killerchip · Pull Request #150 · stovmascript/react-native-version</a></li>\n</ul>\n<h3>確認ポイント: Issue #105</h3>\n<p>上で説明した問題が解決されているかを確認する．早く対応してほしいので，同意できる人はコメントするなり action 付けるなりして欲しい．</p>\n<h3>確認ポイント: OTA について</h3>\n<p>実は OTA を使ったことがないので，OTA を真面目にやるとバージョン周りで考えることが増える気がしている．</p>\n<h2>最後に</h2>\n<p>一旦まとめた．他にも CI とかも固まりつつあるのでこのあたりも今後まとめたい．</p>\n","title":"React Native アプリ開発初期設定（2020/10 版）","date":"2020-10-09T00:00:00.000Z"}},"__N_SSG":true}