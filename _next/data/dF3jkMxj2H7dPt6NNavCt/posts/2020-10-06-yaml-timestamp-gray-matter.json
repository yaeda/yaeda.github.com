{"pageProps":{"postData":{"id":"2020-10-06-yaml-timestamp-gray-matter","contentHtml":"<p>YAML の timestamp 周りでややハマった.</p>\n<p>このブログは Markdown で書いていて，先頭に以下のようなデータを front matter として付与している．</p>\n<pre><code class=\"language-yml\">title: ライフログ\ndate: 2020-10-02 21:30\n</code></pre>\n<p>この<code>date</code>をシンプルにしたいと思った．</p>\n<p>一日に複数のポストがあったときにそれらの順序を決定するために<code>date</code>に「時分」を入れているが，書き始め・書き終わり・投稿で時間差があるため，どの時間に設定するか悩むときがある．時間をそこまで厳密に管理する必要もないし，一日に一回しかポストしないケースの方が大半なのでシンプルに「年月日」と書けたほうが楽．</p>\n<p>ということで試しに<code>date: 2020-10-02</code>としてみたらソートに失敗した．原因は <a href=\"https://www.npmjs.com/package/gray-matter\">gray-matter</a> のパース結果の型に以下のような違いがあったため．</p>\n<ul>\n<li><code>date: 2020-10-02 21:30:00</code> => Date オブジェクト</li>\n<li><code>date: 2020-10-02 21:30</code> => string</li>\n<li><code>date: 2020-10-02</code> => Date オブジェクト</li>\n<li><code>date: \"2020-10-02\"</code> => string</li>\n</ul>\n<p>YAML はデータ型に timestamp という型があって，gray-matter は timestamp として正しいフォーマットの時は Date オブジェクトを返し，そうでないときは string を返すようになっている様子．</p>\n<p><a href=\"https://yaml.org/type/\">Language-Independent Types for YAML™ Version 1.1</a></p>\n<p>型を揃えたいが front matter の書き方に制約を加えるのは，書き手が人間であることを考えると良くない仕様と思われる．そこで gray matter の変換結果を以下のようにすべて string に変換するようにした．</p>\n<pre><code class=\"language-ts\">// Use gray-matter to parse the post metadata section\nconst matterResult = matter(fileContents);\nif (\n  typeof matterResult.data.date === \"object\" &#x26;&#x26;\n  typeof matterResult.data.date.toISOString === \"function\"\n) {\n  matterResult.data.date = matterResult.data.date.toISOString();\n}\n</code></pre>\n<p>雑だがとりあえずはいいだろう．もっとも，ファイル名にも日付を入れていて重複を感じているので front matter の運用自体を変更するかもしれない．</p>\n<hr>\n<p>このポスト書くの主に以下の２つの理由で非常に時間がかかった．</p>\n<ul>\n<li>書き始めたら脳内が整理され，検証が不十分な点が見えてきて再調査</li>\n<li>簡潔でわかりやすい説明や順序を推敲</li>\n</ul>\n<p>続けていくと良い訓練になりそう．</p>\n","title":"YAML の timestamp と gray-matter の挙動","date":"2020-10-06T00:00:00.000Z"}},"__N_SSG":true}