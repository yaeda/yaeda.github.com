{"pageProps":{"postData":{"id":"2020-10-06-yaml-timestamp-gray-matter","content":"\nYAML の timestamp 周りでややハマった.\n\nこのブログは Markdown で書いていて，先頭に以下のようなデータを front matter として付与している．\n\n```yml\ntitle: ライフログ\ndate: 2020-10-02 21:30\n```\n\nこの`date`をシンプルにしたいと思った．\n\n一日に複数のポストがあったときにそれらの順序を決定するために`date`に「時分」を入れているが，書き始め・書き終わり・投稿で時間差があるため，どの時間に設定するか悩むときがある．時間をそこまで厳密に管理する必要もないし，一日に一回しかポストしないケースの方が大半なのでシンプルに「年月日」と書けたほうが楽．\n\nということで試しに`date: 2020-10-02`としてみたらソートに失敗した．原因は [gray\\-matter](https://www.npmjs.com/package/gray-matter) のパース結果の型に以下のような違いがあったため．\n\n- `date: 2020-10-02 21:30:00` => Date オブジェクト\n- `date: 2020-10-02 21:30` => string\n- `date: 2020-10-02` => Date オブジェクト\n- `date: \"2020-10-02\"` => string\n\nYAML はデータ型に timestamp という型があって，gray-matter は timestamp として正しいフォーマットの時は Date オブジェクトを返し，そうでないときは string を返すようになっている様子．\n\n[Language\\-Independent Types for YAML™ Version 1\\.1](https://yaml.org/type/)\n\n型を揃えたいが front matter の書き方に制約を加えるのは，書き手が人間であることを考えると良くない仕様と思われる．そこで gray matter の変換結果を以下のようにすべて string に変換するようにした．\n\n```ts\n// Use gray-matter to parse the post metadata section\nconst matterResult = matter(fileContents);\nif (\n  typeof matterResult.data.date === \"object\" &&\n  typeof matterResult.data.date.toISOString === \"function\"\n) {\n  matterResult.data.date = matterResult.data.date.toISOString();\n}\n```\n\n雑だがとりあえずはいいだろう．もっとも，ファイル名にも日付を入れていて重複を感じているので front matter の運用自体を変更するかもしれない．\n\n---\n\nこのポスト書くの主に以下の２つの理由で非常に時間がかかった．\n\n- 書き始めたら脳内が整理され，検証が不十分な点が見えてきて再調査\n- 簡潔でわかりやすい説明や順序を推敲\n\n続けていくと良い訓練になりそう．\n","title":"YAML の timestamp と gray-matter の挙動","date":"2020-10-06T00:00:00.000Z"}},"__N_SSG":true}