{"pageProps":{"postData":{"id":"2020-10-06-github-actions-repository-dispatch","contentHtml":"<p>別のリポジトリのイベントをきっかけとして GitHub Actions の workflow をトリガーするというのをこのブログで設定したのでまとめておく．</p>\n<p>このブログのソースコードは以下の２つに分かれている．</p>\n<ul>\n<li>Markdown の文章データを管理するリポジトリ（<a href=\"https://github.com/yaeda/blog-posts\">yaeda/blog-posts</a>）</li>\n<li>サイトのソースコードを管理するリポジトリ（<a href=\"https://github.com/yaeda/yaeda.github.com\">yaeda/yaeda.github.com</a>）</li>\n</ul>\n<p>今回，yaeda/blog-posts の方に記事を上げたら，yaeda/yaeda.github.com の方で Build &#x26; Deploy を行うようにした．</p>\n<h2>yaeda/blog-posts 側の設定</h2>\n<p>以下の yml コードが 「main ブランチの posts ディレクトリの Markdown ファイルに変更があったら yaeda/yaeda.github.com に<code>deploy</code>というイベントを投げる」という設定．GitHub Actions の <a href=\"https://docs.github.com/en/free-pro-team@latest/actions/reference/events-that-trigger-workflows#repository_dispatch\">repository_dispatch</a> という機能を使っているが， <a href=\"https://docs.github.com/en/free-pro-team@latest/actions/reference/events-that-trigger-workflows#workflow_dispatch\">workflow_dispatch</a> でも同様のことができると思う．どちらも GitHub API 経由で workflow をトリガーする機能で，これを別のリポジトリの workflow の中で利用する．</p>\n<pre><code class=\"language-yml\">name: dispatch\n\non:\n  push:\n    branches:\n      - main\n    paths:\n      - \"posts/**.md\"\n\njobs:\n  dispatch:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Dispatch\n        uses: peter-evans/repository-dispatch@v1\n        with:\n          token: ${{ secrets.REPO_ACCESS_TOKEN }}\n          repository: yaeda/yaeda.github.com\n          event-type: deploy\n</code></pre>\n<p>API を使う部分は <a href=\"https://github.com/peter-evans/repository-dispatch\">peter-evans/repository-dispatch</a> という Action を作ってくれている人がいたので利用している．権限が足りずおなじみの <code>${{ secrets.GITHUB_TOKEN }}</code> が使えないので personal access token を用意する必要がある点に注意．詳しくはこちら（<a href=\"https://github.com/peter-evans/repository-dispatch#token\">token on peter-evans/repository-dispatch</a>）．</p>\n<h2>yaeda/yaeda.github.com の設定</h2>\n<p>こちらでは <code>deploy</code> というイベントを受け取って Build &#x26; Deploy を行う．以下の例では「 main ブランチへの変更 もしくは <code>deploy</code> イベント」をトリガーとして publish ジョブが走るようになっている．ジョブの中で yaeda/yaeda.github.com と yaeda/blog-posts の２つのリポジトリを checkout してきて Build &#x26; Deploy を行っている．完全なコードはこちら（<a href=\"https://github.com/yaeda/yaeda.github.com/blob/main/.github/workflows/deploy.yml\">yaeda.github.com/deploy.yml at main</a>）．</p>\n<pre><code class=\"language-yml\">name: deploy\n\non:\n  push:\n    branches:\n      - main\n  repository_dispatch:\n    types:\n      - deploy\n\njobs:\n  publish:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n\n      - name: Checkout Blog Posts\n        uses: actions/checkout@v2\n        with:\n          repository: yaeda/blog-posts\n          path: blog-posts\n\n      .\n      .\n      .\n</code></pre>\n<h2>所感</h2>\n<p>ここで紹介した方法は連携する両方のリポジトリに設定が必要なので，自分のリポジトリや所属している組織のリポジトリのような閉じた状況でないと使いづらい．たとえば「React Native の新しいバージョンがリリースされたら更新する PR つくってテストしよう」みたいなのは難しい．そういうときは Renovate とか使いましょう．</p>\n<p>最近はもう GitHub Actions しか使ってなくて，機能も十分だと感じている．あまり凝ったことをしてないってものあるけど，便利．他の人の技も盗みたいと思って zenn.dev を検索してみたら同じ内容の記事を見つけた．こちらも参考にできそう．</p>\n<ul>\n<li><a href=\"https://zenn.dev/search?q=github%2520actions\">検索 | Zenn</a></li>\n<li><a href=\"https://zenn.dev/mizchi/articles/3117b92a834531361fc8\">Github Actions で他のリポジトリからの変更通知を受け取って PR を作成する Workflow | Zenn</a></li>\n</ul>\n","title":"他のリポジトリのイベントで GitHub Actions をトリガーする","date":"2020-10-06 22:40"}},"__N_SSG":true}