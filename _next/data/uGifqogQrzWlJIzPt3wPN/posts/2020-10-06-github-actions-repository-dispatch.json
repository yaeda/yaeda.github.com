{"pageProps":{"postData":{"id":"2020-10-06-github-actions-repository-dispatch","content":"\n別のリポジトリのイベントをきっかけとして GitHub Actions の workflow をトリガーするというのをこのブログで設定したのでまとめておく．\n\nこのブログのソースコードは以下の２つに分かれている．\n\n- Markdown の文章データを管理するリポジトリ（[yaeda/blog-posts](https://github.com/yaeda/blog-posts)）\n- サイトのソースコードを管理するリポジトリ（[yaeda/yaeda\\.github\\.com](https://github.com/yaeda/yaeda.github.com)）\n\n今回，yaeda/blog-posts の方に記事を上げたら，yaeda/yaeda.github.com の方で Build & Deploy を行うようにした．\n\n## yaeda/blog-posts 側の設定\n\n以下の yml コードが 「main ブランチの posts ディレクトリの Markdown ファイルに変更があったら yaeda/yaeda.github.com に`deploy`というイベントを投げる」という設定．GitHub Actions の [repository_dispatch](https://docs.github.com/en/free-pro-team@latest/actions/reference/events-that-trigger-workflows#repository_dispatch) という機能を使っているが， [workflow_dispatch](https://docs.github.com/en/free-pro-team@latest/actions/reference/events-that-trigger-workflows#workflow_dispatch) でも同様のことができると思う．どちらも GitHub API 経由で workflow をトリガーする機能で，これを別のリポジトリの workflow の中で利用する．\n\n```yml:blog-posts/.github/workflows/dispatch.yml\nname: dispatch\n\non:\n  push:\n    branches:\n      - main\n    paths:\n      - \"posts/**.md\"\n\njobs:\n  dispatch:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Dispatch\n        uses: peter-evans/repository-dispatch@v1\n        with:\n          token: ${{ secrets.REPO_ACCESS_TOKEN }}\n          repository: yaeda/yaeda.github.com\n          event-type: deploy\n```\n\nAPI を使う部分は [peter\\-evans/repository\\-dispatch](https://github.com/peter-evans/repository-dispatch) という Action を作ってくれている人がいたので利用している．権限が足りずおなじみの `${{ secrets.GITHUB_TOKEN }}` が使えないので personal access token を用意する必要がある点に注意．詳しくはこちら（[token on peter\\-evans/repository\\-dispatch](https://github.com/peter-evans/repository-dispatch#token)）．\n\n## yaeda/yaeda.github.com の設定\n\nこちらでは `deploy` というイベントを受け取って Build & Deploy を行う．以下の例では「 main ブランチへの変更 もしくは `deploy` イベント」をトリガーとして publish ジョブが走るようになっている．ジョブの中で yaeda/yaeda.github.com と yaeda/blog-posts の２つのリポジトリを checkout してきて Build & Deploy を行っている．完全なコードはこちら（[yaeda\\.github\\.com/deploy\\.yml at main](https://github.com/yaeda/yaeda.github.com/blob/main/.github/workflows/deploy.yml)）．\n\n```yml:yaeda.github.com/.github/workflows/deploy.yml\nname: deploy\n\non:\n  push:\n    branches:\n      - main\n  repository_dispatch:\n    types:\n      - deploy\n\njobs:\n  publish:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n\n      - name: Checkout Blog Posts\n        uses: actions/checkout@v2\n        with:\n          repository: yaeda/blog-posts\n          path: blog-posts\n\n      .\n      .\n      .\n```\n\n## 所感\n\nここで紹介した方法は連携する両方のリポジトリに設定が必要なので，自分のリポジトリや所属している組織のリポジトリのような閉じた状況でないと使いづらい．たとえば「React Native の新しいバージョンがリリースされたら更新する PR つくってテストしよう」みたいなのは難しい．そういうときは Renovate とか使いましょう．\n\n最近はもう GitHub Actions しか使ってなくて，機能も十分だと感じている．あまり凝ったことをしてないってものあるけど，便利．他の人の技も盗みたいと思って zenn.dev を検索してみたら同じ内容の記事を見つけた．こちらも参考にできそう．\n\n- [検索 \\| Zenn](https://zenn.dev/search?q=github%2520actions)\n- [Github Actions で他のリポジトリからの変更通知を受け取って PR を作成する Workflow \\| Zenn](https://zenn.dev/mizchi/articles/3117b92a834531361fc8)\n","title":"他のリポジトリのイベントで GitHub Actions をトリガーする","date":"2020-10-06 22:40"}},"__N_SSG":true}